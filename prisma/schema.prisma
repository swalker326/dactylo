// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

model Sign {
  id           String     @id @default(cuid())
  term         String
  description  String
  definition   String
  videos       Video[]
  categories   Category[] @relation("SignCategories")
  relatedSigns Sign[]     @relation("RelatedSigns")
  relatedTo    Sign[]     @relation("RelatedSigns")
}

model Video {
  id           String      @id @default(cuid())
  name         String
  signId       String?
  userId       String
  uploaderInfo String
  uploadDate   DateTime    @default(now())
  voteCount    Int         @default(0)
  url          String
  gifUrl       String?
  user         User        @relation(fields: [userId], references: [id])
  status       VideoStatus
  sign         Sign?       @relation(fields: [signId], references: [id])
  votes        Vote[]
}

model User {
  id             String  @id @default(cuid())
  email          String  @unique
  uploadedVideos Video[]
  votes          Vote[]
  roles          Role[]

  image    UserImage?
  password Password?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions    Session[]
  connections Connection[]
}

model Vote {
  id       String   @id @default(cuid())
  userId   String
  videoId  String
  voteType VoteType
  voteDate DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
  video    Video    @relation(fields: [videoId], references: [id])
}

model Category {
  id    String @id @default(cuid())
  name  String
  signs Sign[] @relation("SignCategories")
}

enum VideoStatus {
  ACTIVE
  UNDER_REVIEW
  REMOVED
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

//User Related Models

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}
