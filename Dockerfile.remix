# Use multi-stage builds to keep the final image as small as possible
# Base stage
ARG NODE_VERSION=21.5.0
FROM node:${NODE_VERSION}-slim as base

ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable

# Builder stage
FROM base AS builder
WORKDIR /app
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential node-gyp pkg-config python-is-python3 && \
    rm -rf /var/lib/apt/lists/*  # Clean up to reduce image size
COPY . .
RUN pnpm install turbo --global && \
    turbo prune @dactylo/remix --docker

# Installer stage
FROM base AS installer
WORKDIR /app
COPY .gitignore .gitignore
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/pnpm-lock.yaml ./pnpm-lock.yaml
RUN pnpm install
COPY patches patches/
COPY --from=builder /app/out/full/ .
COPY turbo.json turbo.json
RUN pnpm turbo db:generate --filter=@dactylo/db && \
    pnpm turbo build --filter=@dactylo/remix...

# Final stage for app image
FROM base as runner
WORKDIR /app

# Install only the necessary packages
RUN apt-get update && \
    apt-get install -y openssl && \
    rm -rf /var/lib/apt/lists/*  # Clean up to reduce image size

# Set environment variables
ENV NODE_ENV="production"
ENV LITEFS_DIR="/litefs/data"
ENV CACHE_DATABASE_FILENAME="cache.db"
ENV CACHE_DATABASE_PATH="/$LITEFS_DIR/$CACHE_DATABASE_FILENAME"

# Prepare for litefs
COPY --from=flyio/litefs:0.5.8 /usr/local/bin/litefs /usr/local/bin/litefs
ADD /apps/remix/other/litefs.yml /etc/litefs.yml
RUN mkdir -p /data ${LITEFS_DIR}

# Copy project files
COPY --from=installer /app .

# Expose port and define the default command
EXPOSE 3000
CMD [ "pnpm", "run", "start" ]
