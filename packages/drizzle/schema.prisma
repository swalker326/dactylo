generator drizzle {
  provider = "prisma-generator-drizzle"

  // Specify the output directory
  output = "./models"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Term {
  id        String    @id @default(cuid())
  word      String    @unique
  signs     Sign[]
  createdAt String
  updatedAt String?
}

model Sign {
  id           String       @id @default(cuid())
  example      String
  definition   String
  videos       Video[]
  categories   Category[]   @relation("SignCategories")
  relatedSigns Sign[]       @relation("RelatedSigns")
  relatedTo    Sign[]       @relation("RelatedSigns")
  searchSigns  SearchSign[] @relation("SignToSearchSigns")

  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())
  term      Term      @relation(fields: [termId], references: [id])
  termId    String

  @@index([termId])
}

model Video {
  id            String      @id @default(cuid())
  videoId       String      @unique
  trendingScore Float       @default(0)
  signId        String
  userId        String
  uploadDate    DateTime    @default(now())
  voteCount     Int         @default(0)
  url           String
  user          User        @relation(fields: [userId], references: [id])
  status        VideoStatus @relation(fields: [videoStatusId], references: [id])
  approvedOn    DateTime?
  sign          Sign        @relation(fields: [signId], references: [id])
  votes         Vote[]
  favorites     Favorite[]
  reports       Report[]
  videoStatusId Int

  @@index([videoId])
  @@index([userId])
  @@index([signId])
}

model Report {
  id      String @id @default(cuid())
  videoId String
  userId  String
  reason  String

  video     Video    @relation(fields: [videoId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([videoId])
}

model Favorite {
  id      String @id @default(cuid())
  userId  String
  videoId String
  user    User   @relation(fields: [userId], references: [id])
  video   Video  @relation(fields: [videoId], references: [id])

  @@index([userId])
  @@index([videoId])
}

model User {
  id             String  @id @default(cuid())
  email          String  @unique
  uploadedVideos Video[]
  votes          Vote[]
  roles          Role[]

  image    UserImage?
  password Password?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  sessions    Session[]
  connections Connection[]
  favorites   Favorite[]
  reports     Report[]
  searches    Search[]
  requests    Request[]
}

model Vote {
  id       String   @id @default(cuid())
  userId   String
  videoId  String
  voteType VoteType @relation(fields: [voteTypeId], references: [id])
  voteDate DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
  video    Video    @relation(fields: [videoId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  voteTypeId Int

  @@index([userId])
  @@index([videoId])
}

model Category {
  id          String @id @default(cuid())
  slug        String @unique
  name        String
  signs       Sign[] @relation("SignCategories")
  description String @default("")
}

model VideoStatus {
  id    Int     @id @default(autoincrement())
  name  String
  Video Video[]
}

// enum VideoStatus {
//   ACTIVE
//   UNDER_REVIEW
//   REMOVED
// }

model VoteType {
  id   Int    @id @default(autoincrement())
  name String
  Vote Vote[]
}

// enum VoteType {
//   UPVOTE
//   DOWNVOTE
//   NO_VOTE
// }

//User Related Models

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Search {
  id      String       @id @default(cuid())
  term    String
  user    User?        @relation(fields: [userId], references: [id])
  userId  String?
  results SearchSign[]

  createdAt DateTime @default(now())

  @@index([userId])
}

model SearchSign {
  searchId String
  signId   String
  search   Search @relation(fields: [searchId], references: [id])
  sign     Sign   @relation(fields: [signId], references: [id], name: "SignToSearchSigns")

  @@id([searchId, signId])
  @@index([signId])
  @@index([searchId])
}

model RequestStatus {
  id      Int       @id @default(autoincrement())
  name    String
  Request Request[]
}

// enum RequestStatus {
//   PENDING
//   APPROVED
//   REJECTED
// }

model RequestType {
  id      Int       @id @default(autoincrement())
  name    String
  Request Request[]
}

// enum RequestType {
//   SIGN
//   TERM
// }

model Request {
  id              String        @id @default(cuid())
  term            String
  definition      String
  example         String
  userId          String
  status          RequestStatus @relation(fields: [requestStatusId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  requestType     RequestType   @relation(fields: [requestTypeId], references: [id])
  requestStatusId Int
  requestTypeId   Int
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}
